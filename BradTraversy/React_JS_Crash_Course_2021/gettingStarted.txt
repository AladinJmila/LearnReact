Hey guys, welcome to my 2021 React Crash Course.

So, it's been two years or so since my one and I wanted to create an updated version, and this course is meant for beginners, I'll be explaining some of the core concepts and fundamentals of React, we're gonna be building a task tracker application, looking at component, props, state, we're going to use React hooks, and we're also going to be dealing with something called JSON server, which is a mock rest API or kind of like a fake back-end that we can use, so I can show you how we would use React in a full stack application where we're making 'requests' to an API. We're going to look at routing and a whole bunch of other stuff.

So the first thing I want to do is just go through slides and then we'll go ahead and jump into writing code.

So first off what is React? The standard definition is, it's a JavaScript Library for building user interfaces. And you may have heard of it referred to as a Framework, I refer to it as Framework, most people do and I will talk about why in a second.
Now, React is created and it's maintained by Facebook, it's strictly front-end meaning it runs in the Browser. When you have a web-app that's built with let's say PHP, you're running PHP on the server, your app is hosted on the server and then is serves HTML templates or HTML pages to the client. With React, you build what's called a 'Single Page Application' or a SPA, where you can have a single HTML page and then all of your 'routing' all that stuff is done through React which then compiles to a JavaScript bundle that's loaded by the Browser, so it makes very fast and interactive interfaces.
Now even though React is a front-end Framework, so you cannot directly communicate with your database, it's often used in combination with other technologies to create a full-stack application. For instance the MERN stack which is really popular, it's MongoDB which is a type of database. Express which is a back-end Framework. Then Node.js which is a JavaScript runtime. You could also use React on the front-end and use PHP Laravel on the back-end, or Python Django. And what you do is you would serve JSON data from your server, and you would make requests from React to the server to get data, to add data, to update, delete and so on.
Now, as far as being a Library versus a Framework, most people call it a Framework and that's because it's directly comparable to something like Angular or View.js. Now it doesn't have as much included as much as Angular does, like Angular has a built-in routing system, React doesn't, you just have to install an extra package called React Router Dom. So it has an entire ecosystem of packages you can install to make it function as a full-fledged Framework.
Now, as far as a Library goes, when I think of a Library I think of like jQuery LowDash, something where you pull utilities in and use them in your application, React doesn't work like that, it's more like Angular or View, and those three are the top Frameworks in the industry right now, uh, I would go and say React is the most popular, but the other two are great as well.

/***********************************************************************/

All right, so we know that React is a front-end Library slash Framework. Now why would you wanna use it. There's actually a bunch of reasons but one of the biggest is it gives you a way to structure the view layer of you application. So MVC or Model View Controller is a popular design pattern for software, the Model deals with the data, the Controller deals with the requests and routing, and then the View is the UI the User Interface, the part of the app the user sees. React is basically the V in MVC.
Now if you've tried to build a large dynamic interface using JavaScript, vanilla JavaScript it can get really messy. Your HTML your styling and your JavaScript logic are just all over the place and everyone writes Vanilla JavaScript differently. React allows you to build your UI using what are called 'reusable components', so every part of your user interface is looked at as a dynamic 'component' that can hold it's own 'state' and data.
We also don't have to separate our markup from our logic because React uses something called JSX, or 'JavaScript Syntax Extension' and this allows us to basically write dynamic HTML, but it's actually JavaScript formatted like HTML. We can even embed JavaScript expressions, variables, ect.
Now the apps that you build with React are very interactive because it uses something called the 'virtual-dom' which is the Document Object Model. What this does is it allows you to update parts of the page that need to be updated without reloading it. So if you have a list of users or in our case a list of tasks, and you want to delete one of them it doesn't have to reload the page, it does everything behind the scenes. If you to create a traditional PHP applications where you're just serving HTML templates, every delete you make is gonna have to refresh the page. So this makes things much faster, more dynamic and interactive.
React also has performance and testing benefits, another huge reason to learn React is it's very big in the industry right now, just by the way it structures everything it makes it much easier to work on projects with teams, rather than having a bunch of jumbled JavaScript. So managing data is also really easy with one-way data binding, all the data in your state is immutable meaning you can't mutate it directly and React provides ways to basically recreate your state every time that needs to be changed. So this helps with debugging and also offers better performance.

So what should you know before learning React? This can vary depending on person to person, but generally you want to have a good handle on JavaScript. You don't want to go from learning HTML and CSS and then jump right into React. You should know all the fundamentals of JavaScript including things like 'data types' and 'variables', 'functions', 'loops' ect. In React and JavaScript in general you work a lot with asynchronous code, so you should be familiar with 'promises', array methods such as foreach() and map(), filer(), reduce(), these are all commonly used in React applications, so get familiar with those. Doing algorithms is a really good way to practice these array methods.
And then the Fetch API is used to make HTTP requests to either your own back-end server or to a third-party API, for example the GitHub or YouTube API. So get familiar with Fetch.

/***********************************************************************/

So as I said, with React and pretty much any front-end Framework you're going to be looking at your User Interface as a bunch of components. So here's the app we're building, it's called Task Tracker, it's pretty simple you just add a task with a day and a time, you can set a reminder, and you'll be to double-click and set the reminder to either 'true' or 'false' which will show this border, we can delete and so on.
Now here, I just outlined each of the 'components', we have the green around the 'header' 'component' and inside the 'header' we have the 'button' 'component' we have the 'add task' 'component' which we could break down further and create 'input' 'components' as well if we wanted to. Down here we have the 'tasks' 'component' the purple, which wrap all of these and then each individual 'task' is also it's own 'component'. Then we have down here the 'footer' 'component'.
We're also going to look at routing a little bit, so we'll have this 'about' link and that's going to a separate 'rout' that will show the 'about' 'component'.
Alright, so you can go to any website or any UI, or go to Twitter and look at the different 'components', the list of Tweets, each Tweet itself, the box to post a Tweet, all your follower, everything can be looked at as a 'component'. So that's kind of the mind frame you want to be in when you're working with React or even Angular or View.
Now as far as creating 'components' in React, they can be created with both 'classes' and 'functions'. Now we'll be focusing mostly on 'function components' with 'hooks' which seems to be the more common way to do things these days, in my 2019 React course we focused on classes. So if you really dive into class-based 'components', you can check that course out.

So on the left we have a 'component' called 'header', this is formatted as an arrow function, of course it can be in traditional function as well. It simply returns a 'div' with an 'h1'. Now on the right it's the same 'component' as a class, and you can see it's defined as class the extends 'React.Component', which is going to give us everything that is in the root component class to work with, including with the render method which takes care of rendering it out on the scree, and in render we just returning what we're returning in the function-based 'component'.
Now what's being returned looks like HTML but it's actually just 'Syntactic Sugar' for JavaScript which is called 'JavaScript Syntax Extension' or just JSX. And similar to the HTML syntax aside from a few things like instead of the class attribute you use class name. But in addition to that, you can put JavaScript expressions into your JSX to make dynamic, and once you have your 'component' created, you can embed it into other 'components' with this type of syntax which is similar to XML, so we would just have 'header'. we can also use 'props' which are basically attributes, so we could pass in a 'title' of whatever we want into the 'component' and then work with it inside the function or the class or whatever we're using.

Alright, so 'components' are not just static markup, they're dynamic and they can contain something called 'state'. So 'state' is basically just an object that determines how a 'component' renders and behaves, so an example would be if you have a 'collapsible menu' that would have an open and close 'state', you might have a 'state' object in your 'component' that has a value of 'open' that can be either 'true' or 'false'. Now if you have a list of users or tasks or whatever it might be, that's also part of the 'state', so any data you bring into your 'components' that's going to be a part of the 'state', a lot of times want to share that data across multiple 'components', so in that case you would use what is called either 'app state' or 'global state', now sometimes you end up having just a ton of 'app level states' that gets difficult to manage, so in that case you have a few options. You can use the context API which is built into React, or you can use a third-party 'state' Manager like Redux, which is way beyond the scope of this Crash Course, but I did want to mention it and I do have other videos on those.

Now prier to React Version 16.8 we had to use class 'components' if we wanted to hold 'state', function 'components' were actually called dumb 'components' because they couldn't hold 'state'. However in version 16.8 React introduced something called 'hooks' which allows us to use 'state' and other lifecycle functions within 'function components', and that's what we'll be focusing on in this Crash Course. Specifically the 'use state hook' which will allow us to return a 'stateful' value along with a function to update it. There are other hooks as well, 'use effect' is used to perform side effects in 'function components', we'll be using that towards the end. One of the biggest uses of 'use effect' is the make 'http requests' when the page loads. So if you're fetching data from an API 'on page load' you will want to use 'use effect'. There a bunch of others as well, there's 'use context' 'use reducer' but those are beyond the scope of this Crash Course.

/***********************************************************************/

All right, if those last few slides didn't really make much sense at all, don't worry about it because we're going to have plenty of examples throughout the course and throughout the application that we're going to build.
So we're going to build out our User Interface first, and the first implement towards the end something called 'JSON Server' which we're going to use is kind of fake back-end so you can see how React would work if you were building a full-stack application and making requests to a back-end or an API.

All right, enough with the slides, let's go ahead and jump in and let's get started with React.

/***********************************************************************/

All right, so we're going to get started now, there's a bunch of ways to basically start a React application, one of the most common and easiest ways is using a program called 'create React app' which is a CLI, it's a 'command line' interface tool to just easily get up and running and set up a boilerplate with all the files and folders and packages that you need, it also has a development server, it has a way to build out your static assents to deploy.
So to install this we need use 'npm' which is the 'Node Package Manager' and in order to use that you have to node.js installed on your system. I'm sure a lot of you already do, if you don't just go to nodejs.org, download it, install is, it doesn't matter if you're on Windows, Mac or Linux.
Another thing I would suggest installing is the 'React Dev Tools' if you're on Chrome, there's a Chrome extension, there's a Firefox extension as well, and just allows you to see all the 'components' and 'props' and 'state' of your React Application.
So, we're going to install this, we're actually going to use the 'npx' command instead of installing it globally with 'npm'. What this does is it runs and 'create-react-app' and create the folder for us rather than installing create-react-app on your system.
So first of all, make sure you have 'npm', you can do 'npm-version', make sure it's above 5.2 or you won't be able to  use 'npx', and then let's do 'npx create-react-app react-task-tracker' I'm going to call this 'react-task-tracker', because I will be doing a View.js and an Angular course as well doing the same application. And this is just going to set up all of the files and folders that we need, it's going to install all the packages we need and so on.
Okay, so that's all set, now you just want to open that folder up in your text editor, I'm using VS Code so I'm just going to 'cd' 'react-task-tracker' and I'm going to run 'code' and then '.dot' which mean I want to open VS Code in the current folder. Alright, so now over here you can see all the files and folders, I'm just going to make this bigger for now, and I just want to go over some of the of this. So 'package.json', if we look at the dependencies that are included:
- of course we have the 'react' library
- we have 'react-dom' which is responsible for rendering our 'react' application out to the 'document object model' to the browser, if you were to use let's say 'react native' you would have the same 'react' library but you would also have 'react native' instead of 'react-dom'
- Okay, 'react-scripts' comes with the development server, the build tool and so on, everything that create 'react' offers
- and them some testing libraries which we're not going to get into this Crash Course.

- down here we have our 'start' script so 'npm' will run the development server on localhost 3000
- 'npm' run 'build' will build out our static assets for deployment
- we have 'test' for testing
- and then 'eject' will basically allow you to, if you want to change something in the web-pack config, if you want to expose other libraries and packages that are kind of hidden that run behind the scenes, you can 'eject' . But there isn't really a lot of cases where you will have to do that.

/***********************************************************************/

All right, so let's go ahead and run the 'dev server', 'npm start' and that's going to start up the 'dev server'. When this starts up on 'localhost:3000', this will be the development build, if you look at the 'react' dev tools if you installed them it says 'this page is using the development build of React', if you 'build', you'll have all you static assets in the build folder, if you run it from there it'll say it's 'the production build'

I just want to go through some of the other stuff we have here. So in the public folder we have and 'index.html', so this is essentially the single page or the 'single page application' that's being loaded.
It's just a simple HTML file, and we have some 'meta' tags and some stuff in the 'head', but if you look in the 'body' all there really is a 'div' with the 'id' of 'root'. So this is kind of the gateway to our UI, to our React application. And the way this works, if you look in the 'source' folder, which is where we put all out 'components' and 'state' and everything that has to do with out App that we're building, if you look in 'index.js' here, which is kind of the entry point for React:
We're importing 'React', we're importing 'ReactDOM' and then there is method on 'ReactDOM' called 'render()', and what we're doing is we're grabbing that 'div' that I just showed you with the 'id' of 'root' with 'document.getElementById('root')' and we're inserting our 'App' into that 'div'. Now this 'App' comes from 'App.js' which we're importing right here, and 'App.js' contains the root app 'component', so remember think of everything as 'components', well 'App' is the root 'component', so every 'component' that we create, our 'Header', our 'Tasks', our 'Footer' the 'AddForm', all that stuff is going to be in this main root 'App' 'component' Okay, and that's what's being put into that 'div' right here, Okay.
I just wanted to kind of explain that.
Now 18:28
