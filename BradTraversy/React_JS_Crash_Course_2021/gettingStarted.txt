Hey guys, welcome to my 2021 React Crash Course.

So, it's been two years or so since my one and I wanted to create an updated version, and this course is meant for beginners, I'll be explaining some of the core concepts and fundamentals of React, we're gonna be building a task tracker application, looking at component, props, state, we're going to use React hooks, and we're also going to be dealing with something called JSON server, which is a mock rest API or kind of like a fake back-end that we can use, so I can show you how we would use React in a full stack application where we're making 'requests' to an API. We're going to look at routing and a whole bunch of other stuff.

So the first thing I want to do is just go through slides and then we'll go ahead and jump into writing code.

So first off what is React? The standard definition is, it's a JavaScript Library for building user interfaces. And you may have heard of it referred to as a Framework, I refer to it as Framework, most people do and I will talk about why in a second.
Now, React is created and it's maintained by Facebook, it's strictly front-end meaning it runs in the Browser. When you have a web-app that's built with let's say PHP, you're running PHP on the server, your app is hosted on the server and then is serves HTML templates or HTML pages to the client. With React, you build what's called a 'Single Page Application' or a SPA, where you can have a single HTML page and then all of your 'routing' all that stuff is done through React which then compiles to a JavaScript bundle that's loaded by the Browser, so it makes very fast and interactive interfaces.
Now even though React is a front-end Framework, so you cannot directly communicate with your database, it's often used in combination with other technologies to create a full-stack application. For instance the MERN stack which is really popular, it's MongoDB which is a type of database. Express which is a back-end Framework. Then Node.js which is a JavaScript runtime. You could also use React on the front-end and use PHP Laravel on the back-end, or Python Django. And what you do is you would serve JSON data from your server, and you would make requests from React to the server to get data, to add data, to update, delete and so on.
Now, as far as being a Library versus a Framework, most people call it a Framework and that's because it's directly comparable to something like Angular or View.js. Now it doesn't have as much included as much as Angular does, like Angular has a built-in routing system, React doesn't, you just have to install an extra package called React Router Dom. So it has an entire ecosystem of packages you can install to make it function as a full-fledged Framework.
Now, as far as a Library goes, when I think of a Library I think of like jQuery LowDash, something where you pull utilities in and use them in your application, React doesn't work like that, it's more like Angular or View, and those three are the top Frameworks in the industry right now, uh, I would go and say React is the most popular, but the other two are great as well.

/***********************************************************************/

All right, so we know that React is a front-end Library slash Framework. Now why would you wanna use it. There's actually a bunch of reasons but one of the biggest is it gives you a way to structure the view layer of you application. So MVC or Model View Controller is a popular design pattern for software, the Model deals with the data, the Controller deals with the requests and routing, and then the View is the UI the User Interface, the part of the app the user sees. React is basically the V in MVC.
Now if you've tried to build a large dynamic interface using JavaScript, vanilla JavaScript it can get really messy. Your HTML your styling and your JavaScript logic are just all over the place and everyone writes Vanilla JavaScript differently. React allows you to build your UI using what are called 'reusable components', so every part of your user interface is looked at as a dynamic 'component' that can hold it's own 'state' and data.
We also don't have to separate our markup from our logic because React uses something called JSX, or 'JavaScript Syntax Extension' and this allows us to basically write dynamic HTML, but it's actually JavaScript formatted like HTML. We can even embed JavaScript expressions, variables, ect.
Now the apps that you build with React are very interactive because it uses something called the 'virtual-dom' which is the Document Object Model. What this does is it allows you to update parts of the page that need to be updated without reloading it. So if you have a list of users or in our case a list of tasks, and you want to delete one of them it doesn't have to reload the page, it does everything behind the scenes. If you to create a traditional PHP applications where you're just serving HTML templates, every delete you make is gonna have to refresh the page. So this makes things much faster, more dynamic and interactive.
React also has performance and testing benefits, another huge reason to learn React is it's very big in the industry right now, just by the way it structures everything it makes it much easier to work on projects with teams, rather than having a bunch of jumbled JavaScript. So managing data is also really easy with one-way data binding, all the data in your state is immutable meaning you can't mutate it directly and React provides ways to basically recreate your state every time that needs to be changed. So this helps with debugging and also offers better performance.

So what should you know before learning React? This can vary depending on person to person, but generally you want to have a good handle on JavaScript. You don't want to go from learning HTML and CSS and then jump right into React. You should know all the fundamentals of JavaScript including things like 'data types' and 'variables', 'functions', 'loops' ect. In React and JavaScript in general you work a lot with asynchronous code, so you should be familiar with 'promises', array methods such as foreach() and map(), filer(), reduce(), these are all commonly used in React applications, so get familiar with those. Doing algorithms is a really good way to practice these array methods.
And then the Fetch API is used to make HTTP requests to either your own back-end server or to a third-party API, for example the GitHub or YouTube API. So get familiar with Fetch.

/***********************************************************************/

So as I said, with React and pretty much any front-end Framework you're going to be looking at your User Interface as a bunch of components. So here's the app we're building, it's called Task Tracker, it's pretty simple you just add a task with a day and a time, you can set a reminder, and you'll be to double-click and set the reminder to either 'true' or 'false' which will show this border, we can delete and so on.
Now here, I just outlined each of the 'components', we have the green around the 'header' 'component' and inside the 'header' we have the 'button' 'component' we have the 'add task' 'component' which we could break down further and create 'input' 'components' as well if we wanted to. Down here we have the 'tasks' 'component' the purple, which wrap all of these and then each individual 'task' is also it's own 'component'. Then we have down here the 'footer' 'component'.
We're also going to look at routing a little bit, so we'll have this 'about' link and that's going to a separate 'rout' that will show the 'about' 'component'.
Alright, so you can go to any website or any UI, or go to Twitter and look at the different 'components', the list of Tweets, each Tweet itself, the box to post a Tweet, all your follower, everything can be looked at as a 'component'. So that's kind of the mind frame you want to be in when you're working with React or even Angular or View.
Now as far as creating 'components' in React, they can be created with both 'classes' and 'functions'. Now we'll be focusing mostly on 'function components' with 'hooks' which seems to be the more common way to do things these days, in my 2019 React course we focused on classes. So if you really dive into class-based 'components', you can check that course out.

So on the left we have a 'component' called 'header', this is formatted as an arrow function, of course it can be in traditional function as well. It simply returns a 'div' with an 'h1'. Now on the right it's the same 'component' as a class, and you can see it's defined as class the extends 'React.Component', which is going to give us everything that is in the root component class to work with, including with the render method which takes care of rendering it out on the scree, and in render we just returning what we're returning in the function-based 'component'.
Now what's being returned looks like HTML but it's actually just 'Syntactic Sugar' for JavaScript which is called 'JavaScript Syntax Extension' or just JSX. And similar to the HTML syntax aside from a few things like instead of the class attribute you use class name. But in addition to that, you can put JavaScript expressions into your JSX to make dynamic, and once you have your 'component' created, you can embed it into other 'components' with this type of syntax which is similar to XML, so we would just have 'header'. we can also use 'props' which are basically attributes, so we could pass in a 'title' of whatever we want into the 'component' and then work with it inside the function or the class or whatever we're using.

Alright, so 'components' are not just static markup, they're dynamic and they can contain something called 'state'. So 'state' is basically just an object that determines how a 'component' renders and behaves, so an example would be if you have a 'collapsible menu' that would have an open and close 'state', you might have a 'state' object in your 'component' that has a value of 'open' that can be either 'true' or 'false'. Now if you have a list of users or tasks or whatever it might be, that's also part of the 'state', so any data you bring into your 'components' that's going to be a part of the 'state', a lot of times want to share that data across multiple 'components', so in that case you would use what is called either 'app state' or 'global state', now sometimes you end up having just a ton of 'app level states' that gets difficult to manage, so in that case you have a few options. You can use the context API which is built into React, or you can use a third-party 'state' Manager like Redux, which is way beyond the scope of this Crash Course, but I did want to mention it and I do have other videos on those.

Now prier to React Version 16.8 we had to use class 'components' if we wanted to hold 'state', function 'components' were actually called dumb 'components' because they couldn't hold 'state'. However in version 16.8 React introduced something called 'hooks' which allows us to use 'state' and other lifecycle functions within 'function components', and that's what we'll be focusing on in this Crash Course. Specifically the 'use state hook' which will allow us to return a 'stateful' value along with a function to update it. There are other hooks as well, 'use effect' is used to perform side effects in 'function components', we'll be using that towards the end. One of the biggest uses of 'use effect' is the make 'http requests' when the page loads. So if you're fetching data from an API 'on page load' you will want to use 'use effect'. There a bunch of others as well, there's 'use context' 'use reducer' but those are beyond the scope of this Crash Course.

/***********************************************************************/

All right, if those last few slides didn't really make much sense at all, don't worry about it because we're going to have plenty of examples throughout the course and throughout the application that we're going to build.
So we're going to build out our User Interface first, and the first implement towards the end something called 'JSON Server' which we're going to use is kind of fake back-end so you can see how React would work if you were building a full-stack application and making requests to a back-end or an API.

All right, enough with the slides, let's go ahead and jump in and let's get started with React.

/***********************************************************************/

All right, so we're going to get started now, there's a bunch of ways to basically start a React application, one of the most common and easiest ways is using a program called 'create React app' which is a CLI, it's a 'command line interface' tool to just easily get up and running and set up a boilerplate with all the files and folders and packages that you need, it also has a development server, it has a way to build out your static assents to deploy.
So to install this we need use 'npm' which is the 'Node Package Manager' and in order to use that you have to node.js installed on your system. I'm sure a lot of you already do, if you don't just go to nodejs.org, download it, install is, it doesn't matter if you're on Windows, Mac or Linux.
Another thing I would suggest installing is the 'React Dev Tools' if you're on Chrome, there's a Chrome extension, there's a Firefox extension as well, and just allows you to see all the 'components' and 'props' and 'state' of your React Application.
So, we're going to install this, we're actually going to use the 'npx' command instead of installing it globally with 'npm'. What this does is it runs and 'create-react-app' and create the folder for us rather than installing create-react-app on your system.
So first of all, make sure you have 'npm', you can do 'npm-version', make sure it's above 5.2 or you won't be able to  use 'npx', and then let's do 'npx create-react-app react-task-tracker' I'm going to call this 'react-task-tracker', because I will be doing a View.js and an Angular course as well doing the same application. And this is just going to set up all of the files and folders that we need, it's going to install all the packages we need and so on.
Okay, so that's all set, now you just want to open that folder up in your text editor, I'm using VS Code so I'm just going to 'cd' 'react-task-tracker' and I'm going to run 'code' and then '.dot' which mean I want to open VS Code in the current folder. Alright, so now over here you can see all the files and folders, I'm just going to make this bigger for now, and I just want to go over some of the of this. So 'package.json', if we look at the dependencies that are included:
- of course we have the 'react' library
- we have 'react-dom' which is responsible for rendering our 'react' application out to the 'document object model' to the browser, if you were to use let's say 'react native' you would have the same 'react' library but you would also have 'react native' instead of 'react-dom'
- Okay, 'react-scripts' comes with the development server, the build tool and so on, everything that create 'react' offers
- and them some testing libraries which we're not going to get into this Crash Course.

- down here we have our 'start' script so 'npm' will run the development server on localhost 3000
- 'npm' run 'build' will build out our static assets for deployment
- we have 'test' for testing
- and then 'eject' will basically allow you to, if you want to change something in the web-pack config, if you want to expose other libraries and packages that are kind of hidden that run behind the scenes, you can 'eject' . But there isn't really a lot of cases where you will have to do that.

/***********************************************************************/

All right, so let's go ahead and run the 'dev server', 'npm start' and that's going to start up the 'dev server'. When this starts up on 'localhost:3000', this will be the development build, if you look at the 'react' dev tools if you installed them it says 'this page is using the development build of React', if you 'build', you'll have all you static assets in the build folder, if you run it from there it'll say it's 'the production build'

I just want to go through some of the other stuff we have here. So in the public folder we have and 'index.html', so this is essentially the single page or the 'single page application' that's being loaded.
It's just a simple HTML file, and we have some 'meta' tags and some stuff in the 'head', but if you look in the 'body' all there really is a 'div' with the 'id' of 'root'. So this is kind of the gateway to our UI, to our React application. And the way this works, if you look in the 'source' folder, which is where we put all out 'components' and 'state' and everything that has to do with out App that we're building, if you look in 'index.js' here, which is kind of the entry point for React:
We're importing 'React', we're importing 'ReactDOM' and then there is method on 'ReactDOM' called 'render()', and what we're doing is we're grabbing that 'div' that I just showed you with the 'id' of 'root' with 'document.getElementById('root')' and we're inserting our 'App' into that 'div'. Now this 'App' comes from 'App.js' which we're importing right here, and 'App.js' contains the root app 'component', so remember think of everything as 'components', well 'App' is the root 'component', so every 'component' that we create, our 'Header', our 'Tasks', our 'Footer' the 'AddForm', all that stuff is going to be in this main root 'App' 'component' Okay, and that's what's being put into that 'div' right here, Okay.
I just wanted to kind of explain that.

Now, let's just actually change the title, we'll change to 'Task Tracker'. And if you want to use the Bootstrap CDN or something like that, you could use this file for that kind of thing. We'll go ahead and save that, this updates right away, or it should, I don't know why it didn't that time but this will auto reload.

I want to go now into 'App.js', and this is the root app 'component', and everything that you see here is coming this 'component' here. So we're importing 'logo' which is this 'logo.svg', it's this spinning React logo. We're also importing an 'App.css' file which is just some basic styling. And then we have a function, now remember, 'components' can be 'functions' or 'classes', most people these days seem to use 'functions' with 'hooks', that what's we'll be focusing on, but this could ne a 'class', I might give you an example of that. But if you look in the return of this function it looks like HTML but this is actually JSX (JavaScript Syntax Extension), and there're few differences for instance you might notice 'className', we can't use the 'class' to assign a 'class' we use 'className', same with 'for' if you have a label with a 'for' attribute you don't want to use 'for' in React you would use 'htmlFor', so keep that in mind. This also dynamic, we can have JavaScript 'expressions' and 'variable', here we're bringing in 'logo' adding it to the source 'src' of the image. What I'm going to do though is get rid of everything that's inside of this 'div' and for now let's just put an 'h1' and say 'Hello From React' for now, I'm going to save that and this will auto reload, and we don't need to bring in the 'logo' and 'App.css'. And we also don't need some of some of these files anymore, so 'logo' I'm going to get rid of, the 'App.css', I also don't want 'App.test.js' and 'setupTests.js' since we're not with that, so go ahead and delete those four files just to clean things up a little bit.

Now, when we're returning this JSX here, you can only return a single 'parent element', so you can put whatever you want inside of this 'div' and it doesn't have to be a 'div', it can be a 'paragraph', it could be a 'heading', it could be a 'fragment' which I'll show you in a second, but if I go under here and try to put let's say 'h2' and I say 'Hello' you'll see I'm already getting and error here and it won't compile, it says 'JSX expressions must have one parent element', so whatever you return has to be a single element and then anything else, any other 'components' or whatever you want can go inside of it. So I'm going to move this 'h2' up into the 'div' and that should fix it, Okay.

Now, let's go ahead and open up the 'Dev tools' here, I'm going to go to the 'elements' tab just to show you what this compiles to. So we have a 'div' with the 'id' of 'root' that wraps around our entire UI, and we have this 'div' with the 'class' of 'App' and then our 'headings', so we're seeing this right here. Now obviously 'className' is going to compile out to a regular HTML 'class'. If you don't want to have a 'div' or any element around these 'headings' or whatever we have here, we could just use a 'fragment' or just an empty 'angle bracket' '<>', if I save that and we check this out, it's just the 'h1' and 'h2', of course we still have the 'root' 'div' which wraps around everything, but as far as this 'component' goes it's not going to have a 'div' or anything wrapped around these. But I do actually want a 'div' that's going to have a 'class' of 'container' for some styling that I'm going to add later.
Now we can add 'expressions' in here, we can use 'variables', so for instance if I were to say 'const name' and - make sure you do this above the 'return' of course - and set the name to 'Brad' and I go down here and put in some 'curly braces' I can then put 'name' in here and I get 'Hello Brad'. I can also do '1 + 1' and that's going to render out to '2', I can do conditionals as 'ternary operators' so let's say 'const x' 'equals' 'true' and then I could go down here and say 'if x then show yes else show no' it's just a 'ternary operator'. So 'Hello Yes', if I change this to 'false' and save we get 'Hello No'. Alright, so you can write JavaScript directly in here which makes it really nice, it's really dynamic. Alright so I'm going to get rid of that.

And now we're going to work on just creating our own 'components', remember I said think of your App or your User Interface as just a bunch of 'components'.

So we're going to start with the 'Header', so I'm going over to 'source', my 'source' folder, create a folder called 'components', this is where we're going to create all of our 'components'. The first one we're going to call 'Header.js' uppercase 'h' that's just the convention for 'components', and this could be a class or a function, and there's and extension for 'VS Code' that I'd highly recommend using it if you're using 'VS Code' and that's 'ES7 React/Redux/GraphQL/React-Native snippets' which has a bunch of snippets like 'imports', 'exports' even 'loops' and just regular JavaScript stuff, but it also has these snippets for 'components', so 'rcc' will create a class based 'component', 'rce' will create a class based 'component' but will export down in the bottom here, the one that I like to use is the Arrow function, 'rafce', this one right here so it's nice and clean, it's just an Arrow function that exports down at the bottom.

So, what I'll do with that extension installed 'rafce' 'enter' and that just creates a flat boiler plate of a 'component' of an Arrow function. Now this here, it's importing React because this used to be required for every React 'component', however we don't need this anymore so we can actually get rid of it.
Now as far as what I want to output in the 'header', I'm going to use a 'header' tag as my parent element and then we'll put an 'h1' in here and say 'Task Tracker', now if I save it nothing is going to happen because we just created the 'component', we didn't put it into our application, so back in our 'App.js' let's go ahead and import 'Header' 'from' and we want to go into '.dot/slash components /slash Header', and we just embed it like if it was an  XML tag, so <Header /> just like that, save it, and now we have 'Task Tracker'.

Now I want to talk a little bit about 'props', because you can pass stuff in here like if we want to pass a 'title' to our 'header' and for now we'll just say 'Hello', now it's not going to do anything because we're not handling it but we can pass anything we want in. To retrieve this 'prop' inside of our component here, we take in 'props' as a parameter, and then down here let's say we want to replace this static text with out 'props.title'. If I save that now we see 'Hello' because that's what's being passed in.
Now we can also have 'default' 'props', so if I don't pass in anything in here and I save that, it's not going to show anything because there is not 'title'. However, I could go below the function, the 'component' and say 'Header.defaultProps' and set that to an 'object' and set that the 'title' to 'Task Tracker'. Now if I save that, that's going to show up because that's the default, if I were to again pass something in here it would override the default. Now this 'props.title' we could clean this a little bit, 'props' is just going to be and 'object' of whatever 'props' you pass in, so we can 'destructure', so we can just ass 'curly braces' and take in the title, and then down here we don't need to do 'props.title' we can just go 'title' and that's going to give us the same exact result.

Now there's also 'prop' types which kind of like a built-in type system for your 'properties', it's not something you have to use but it's something that will help you out and make your code a little bit more robust. I'm not going to focus on creating 'prop types' for everything, but I just wanted to show you how it works. Now with the extension the ES7 React extension you can do 'impt' to import 'PropTypes', and then what we can do is do down here and say 'Header.propTypes' lower-case, set that to an 'object' and we know we have a 'title' and we can create a type, do we want this to be a 'string', a 'number', a 'boolean'. We want this to be a 'string' so uppercase 'P' 'Proptypes.string'. Now if I were to go back here and pass in let's say 'title' and pass in a 'number', a 'boolean' or something you want to have it wrapped in 'curly braces'. We'll pass in a '1' and right away down here in the console, it's going to render but you'll see we get this warning 'invalid prop `title` of type `number` supplied to header, expected `string`', Okay so it's just a way to make your code more robust and catch errors and mistakes before they happen to you. And you can also use something like TypeScript with React as well.
Alright, and if it's required you can do '.isRequired', and we have a 'default prop' so it's not going to give us any errors, if we were to get rid of the 'default prop' and reload, you'll see I'll get a warning down here.

Alright, so we'll go ahead an keep 'Header' as is, and I want to talk a little bit about styling because there's few ways you can do, you know, CSS within React. So one is to just use a 'style sheet' which is what ultimately going to do, I'm going to use this 'index.css', I already have some styles prepared. But you can also use something like 'style components' which is an external package that is really popular, you can also use direct CSS in JavaScript, so I'm going to give an example of that.
So this 'h1' here, we can set 'style', and when you use 'style' you want to use double 'curly braces' if you're doing it inline like this, and let's say we wanted to change the 'color' and we would set that to a 'string' of whatever  color value, so if I set that to 'yellow', if I want to add something else I'd put a ',comma', like say 'backgroundColor', now it's not going to be 'backgroung' '-dash' 'color' like CSS, it's going to be 'camelCased' like this and set it to a 'string', we'll say 'blue', save that, Okay.
Another way we can do this if you don't want to do it inline like this. You could create a 'variable' down here, we could say 'headingStyle' and set that to be an 'object', and then just grab both of these, cut that out, put those in here, and use single 'curly braces' here and pass inn our 'headingStyle' and that's going to do the same thing.
Alright, I'm not going to be using this except where we have some dynamic styling, so I'm going to get rid of this, but I will keep this down here just to remind you that you can do this, we'll say 'CSS in JS'.

Alright, now I'm going to add some CSS, so this 'index.css' we're going to get rid of, and you get this code, this whole thing in the GitHub repository in the description so just grab the style and paste it in. I'll go through it real quick, it's pretty simple we're using the Poppins font, we have a reset, a container is going to be 500 pixels wide with a border, the 'header' is going to be a 'flex-box', we're going to have a 'button' on the side, 'button' classes... 'button' styles, the list of 'tasks' will be styled, our 'form' and 'form' controls and then our 'footer'. So, pretty simple, I'm going to go ahead and save that and it's going to look like this, just make this a little wider like that. Now close that up and you do not have to touch the CSS anymore.

Now the next thing that I'd like to do here is add a 'button', so next to the 'h1' let's put a 'button' here, and this is going to say 'Add' for now, so we save that, we also want to add a class here of 'header' because that's what I have in the 'style sheet', that's going to make it a 'flex-box' and align it side by side, and then I also want to add a 'className' here of 'btn'.
So as far as 'components' go, you can make whatever you want into a 'component', so if we want to create a 'button' 'component' in case we want to add more buttons with maybe different colors and different text and events, we can do that. So I'm going to a file in 'components' called 'Button.js', we're going to map out a function here. So actually I'm going to cut this out of here, and we're just going to return this 'Button' directly, and then in our 'Header' we're going to bring that 'Button' 'component' in, it's in the same folder so just '.dot/slash' and then we'll put that here. And we're going to see the same result, now I want to be able to take a couple of 'props' into this 'Button', so one will be color, we'll pass in a color of let's say 'green', we'll have 'text'. So remember we catch 'props' here, we could just use 'props' and use it as an object, I'm going to 'destructure' that object and take 'color' and 'text', and let's add right here instead of static, add 'text' and then for the 'color' I will go ahead and add 'style' and let's use double 'curly braces' and set the 'backgroundColor' to 'color', so save that, and now we have a green button that says 'Hello'.
So if we wanted to add other buttons, you could copy this down and set the 'props' to different values. You get the point, you can use this component with new 'props'.

And then in our button we can have default 'props' so we could say 'Button.defaultProps' and we can set the color, let's set that to 'steelblue', and we can also use our 'PropTypes', so up here we import our 'PropTypes', and 'Button.propTypes', this first is going to be lowercase, this confused me for a long time, so we have out 'text' which is going to be 'PropTypes.string', and then we have the 'color' 'PropTypes.string'

/***********************************************************************/

Now we're going to go into 'events', let's say I want to have an event on this button, I can just add right here 'onClick' and set that to function called 'onClick', and I could go up here and create that function, so 'const onClick', and we can do a console log and just say  'click', so if I go over here and click, you can see it's going to log that.
You can also pass in the 'event object', so if you want to get the position of the element that's clicked or whatever, there's a lot of things you can access with that.
But, since this is a component, it's not going to always have the same click, so what we'll do is we'll have that 'click' as a 'prop', so here in the 'Header.js' let's say 'onClick' and for now let's just set this to a function here called 'onClick' in our 'Header', this isn't going to stay, I'm just putting it here for now, and we'll say 'console.log' 'Click'. Alright, now this is getting passed in as a 'prop', so in our 'Button' we have to catch it here just like we did with the other ones, and we can get rid of this 'onClick' function inside the body of the 'Button' function. Now down here in the 'PropTypes' we could add 'onClick' and we say we want that as 'PropTypes.func' because it's a function. We'll save that, and if we go and click we'll see 'Click'

/***********************************************************************/

Now I want to start talking about 'state' and we're going to start dealing with our 'tasks'. In 'components' file, I'm going to create a new file called 'Tasks.js', this is our 'Task' 'component', let's sketch out a 'component'. And for now I'm just going to create a variable called 'tasks' and set that to an 'array' and I'm just going to paste in three different tasks, they're just 'objects' with and 'id', 'text' 'day' and a 'reminder' which is just a 'boolean' value. Alright, now ultimately this is not the way we want to do this, we want the tasks to be a part of our 'state' so I'll show you how to integrate that into our component in a minute, I just want to show you first how to map through these, or loop through these tasks and output something based, you know, for each one.

/***********************************************************************/

So we do that by creating what's called a 'list' and we create a list by using the 'map()' Array method. In the 'Tasks' we actually don't need a 'div' so we'll just use a 'fragment'. So I'm going to open 'curly braces' and take my 'tasks' and you want to do '.map()' to create a 'list'. Now 'map()' takes in a function so I'm going to use an Arrow function and I'm going to set this to some 'parentheses' with some JSX inside. Now for each task, I'll call it 'Task', and here, let's just for now put and 'h3', and then let's say we want the 'Task.text', so we'll just get the 'text' for each one and output that. Alright, if I save now nothing shows because we haven't brought in the 'Task' 'component', so let's go here in 'App.js' and import it then add  under the 'Header'. Save that, notice that it's showing an 'h3' of each of the 'tasks' 'text'. In addition to that we have a warning that says 'each child in the list should have a unique "key" prop', so when we use '.map()' here, and we output JSX that's called a list, so the parent of the 'list' which is in this case an 'h3' should have a 'key' 'prop' and that should be something unique so we'll use the 'task.id' because those are unique, so if I save that and reload that's going to get rid of console warning down here

/***********************************************************************/

Now ultimately like I said we don't want this to be separate from our 'component', we want this to be part of our 'state'. So what I'm going to do is just cut the Array itself and delete this and to use 'state' inside of a function we use a 'hook' called 'useState'. So let's say 'import' and then in 'curly braces' we want to take 'useState' and that's from 'react' directly. Okay, now the way we do this is, above the 'return' we're going to say 'const' then 'brackets' and then what we want to call this piece of 'state' which is 'tasks', and then a function to update the 'state' which we're going to call 'setTasks', we want to set that to 'useState()' and then in here the default that we want to use for this piece of 'state' for out 'tasks' which I'm going to go ahead and just paste that Array. Alright, now if I save this, you'll see that there's no difference here because this 'tasks' variable is still being used right here, except instead of having it come from outside of our 'component', it's now part of out 'component' state, if we wanted to change any part of this 'state' we would use 'setTasks'. It's important to know that you wouldn't do something like 'tasks.push()' if you wanted to add to it because 'state' is 'immutable', it's not something that you can directly change, you basically recreate and send it down, it's one way data. So to do that you would use 'setTasks()' instead and then change it to whatever you want, if you to 'spread...' across what's already there and then add a new object you could do that.

/***********************************************************************/

Now, we don't really want to have our tasks in the 'Tasks' component because we're going to want to access these from other components, so you could use something like the 'Context API' or 'Redux' where you would a kind of a store that hovers over your UI where you could pull different pieces of state from, but we're not going to get into that so what we want to do is put it in our 'App.js', that will make it our global 'state' then we can pass it down into 'components' that we want as 'props'. So what I'll do is take this, cut that out and instead put that in our 'App.js', and then I'm also going to take this whole thing where we defined 'tasks' and 'setTasks' and cut that, alright, and then we're going to put that in our 'App.js'. Now, this is a part of our 'App' 'component' 'state' or our 'App' level 'state'. And what we can do is take our 'tasks' and pass them into our 'Task' 'component' as a 'prop', so we want to set 'task={tasks}'. It's still not going the work because 'tasks' in 'Tasks.js' is not defined, but remember it's being passed in as a 'prop' so we can do 'props' then 'props.tasks' or we can just destructure, and now it works. So now we have our 'state' where it should be which is at the top level because we want to use these within other 'components', or we may want to. If we keep it in 'Tasks.js' we can't.

/***********************************************************************/

So the next thing I want to do is instead of just rendering out an 'h3' for each task I want to have a separate 'Task' 'component'. So let's create a new file called just 'Task' singular '.js' and let's create a 'component'. Let's do a 'div' and give this a 'className="task"' and then in here we'll have an 'h3', and we're going to get passed in here, actually for now let's just say 'My task' and then what I'll do is in our 'Tasks.js' we'll 'import' the singular 'task' 'component', so that's going to be 'from' '.dot/slash' 'Task', and then instead of 'h3' this is going to be a 'Task' 'component', we're still going to have the 'id' but we want to pass in each task as a 'prop', ok so we're looping through them here and then we're outputting a 'component' and we're passing the 'task' in as 'prop'. So we'll save that and now all we're seeing is 'My Task' because that's all we're putting here, however we're going to catch that 'prop', we're going to take in 'task' and then in the 'h3' we'll say 'task.text', so now we're seeing our task text. So in addition to that we're going to want, let's do a 'paragraph' and we have 'task.day', save that, here we go, looks good.

/***********************************************************************/

We're going to want to have a 'delete' icon, I'm going to use 'Font Awesome', you could include 'Font Awesome' the CDN in you 'index.html' in you public folder, however what I'm going to do is install 'React Icons' which allows you to use multiple icon libraries. So I'm going to leave my 'dev server' running open a new 'terminal' and say 'npm' install 'react-icons' so that way we can just bring in an icon that we want to use and use it, instead of using a CDN.
Okay, so 'React Icons' is installed and if you look in your 'package.json' you should see 'react-icons', anything you install with 'npm' as long as it's local and not global you're going to see in here.
So we want to bring in a specific icon, we're basically using icons as React 'components', we're going to bring in 'FaTimes' which is the 'x' icon 'from' 'react-icons' and then '/slash' 'fa' for 'font awesome' because there's multiple libraries that you can use with this. And then let's go within the 'h3' right here, so after the text we're going to put in <FaTimes /> like we would put in any 'component' and save, I think we have to restart the server after we install 'React Icons', so I'm going back to my 'dev server' and stop that 'Control c', 'Command c', 'npm start', and then there we go. I want to make them red so I'm going to add a 'style' to this, so say 'color' to be 'red' and let's make the 'cursor' a 'pointer'. Alright so now we have our delete icons.

/***********************************************************************/

Now we want to make it so when we click this it deletes that particular task. How do we do that when we don't have access to the tasks, remember the tasks are stored in the 'App.js' and the 'App' 'component'. Now if you were using the 'Context API' or 'Redux' there's ways to access your state from within 'components' pretty easily but, 'Redux' I mean there's a lot of boiler plate and it can be a little difficult to learn, like 'reducers' and stuff like that. So in this case what we can do is just use 'props', we can send down a function as a 'prop' and fire that up when we click in here. So in the 'App.js' let's create a function, so whenever we need to delete a task or add or anything like that it's going to be in this file. So let's say 'Delete Task' and create a function called 'deleteTask', and that's going to take in a specific 'id' and for now we're just going to 'console.log' the text 'delete' and we'll also log the 'id'.
Alright, now we're going to pass in a 'prop' to 'Tasks', remember 'Task' is where the actual button is. Let's call this 'prop' 'onDelete' and basically when that's fired off it's going to call 'deleteTask', and then 'onDelete' is going to be a 'prop' of Tasks, so just like we passed in 'tasks' we want to pass in 'onDelete' and that's going to get passed in here as a 'prop' as well, that's where we want to use it, so 'onDelete={onDelete}', and then in Task again pass in on delete as a 'prop' however we want to call that on a click, so in this 'FaTimes' let's say 'onClick' and set that to {onDelete} which is basically going to work it's way up and call 'deleteTask'. So 'state' gets passed down, 'actions' get passed up. So if I click this, we do get the 'delete' text but we also see this 'event' stuff because that's what's being passed here by default, if I want to actually pass the 'id' in then what I have to do is, on the 'onClick' here, instead of calling the 'onDelete' directly, we call a function and then we call 'onDelete' and pass in the 'task.id'. So now, if I click on one of these, I get 'delete 1', 'delete 2', 'delete 3'. So we're able now to click on these and call this function which is in the 'App.js' where we have access to the 'state'.
Alright, now to actually delete, get rid of that 'console.log' and we want to call 'setTasks()', because that's how we deal with our mutable 'state', and we're going to take the tasks that are already there and just 'filter', so '.filter()' is a high order Array method, you should really know this stuff before getting into React, but, this basically takes in a function, so we'll for each task I want to filter, where let's say 'task.id', if the 'task id' is not equal the 'id' so that's what I want to show, I don't want to show the task with the 'id' because we're deleting it, Okay, so this is just within the UI, so if we save that and I reload and click on the 'x' here, you'll see that it goes away.
Now if want to make it so it shows a message if there are not tasks, I could go down to here, and wrap this in 'curly braces'  and I could say 'if tasks.length' is greater than 'zero' then show tasks, else show 'No Tasks To Show'. Alright, so there we go, if there's nothing there it's going to give us that message, if I reload they're all going to come back, because remember this is just the UI that's what React does. You can turn this in a full-stack application by having some kind of back-end, some kind of API that you make requests to and fetch data from which we might do at the end with something called 'JSON Server'.

/***********************************************************************/

Now, let's do the reminder, I want to be able to double click and add a specific 'class'. If you look in the CSS I have a class called reminder with a green border on the left. So basically what we want to happen is when we double click we want to change whatever task we're double clicking change the reminder to the opposite of whatever it's set and if it's 'true' have that border. So I'm going to start again in the 'App.js' just like we just did with the delete and let's say 'Toggle Reminder' and we'll create a function here, let's call it 'toggleReminder' and it's going to need the 'id' because it needs the know which one to toggle. And for now, I'm just going the 'console.log' the 'id', and we need to pass this down just like we did with the delete, so inside <Task /> let's say 'onToggle' and set that to 'toggleReminder'. And then in 'Tasks.js' also pass in the 'prop' of 'onToggle' or I should say catch the 'prop', and then here, pass it into a 'prop' of 'onToggle' and set that to {onToggle}. And then inside 'Task.js' what we want to do is on the 'div' not on the delete button obviously, so I'm going to add this on the main 'div' and let's say 'onDoubleClick' and we're going to set that to, and this should get passed in 'onToggle', so 'onDoubleClick' we're going to call {onToggle}. Alright now again we need the 'id' so let's just do a function and then call 'onToggle' and pass in the 'id', 'id' not defined, that's because it should be 'task.id', so now if I double click one of there it's going to show the 'id'.
Now what we want this to do, we want this to of course toggle the reminder either from 'true' to 'false' or from 'false' to 'true', so there's a bunch of ways you can do this, I'm going to use, of course we nee to use 'setTasks' and I'm going to use 'map()' so we're going to say 'tasks' which is our 'state', out task in our 'state', we want to map through and for each one we'll call a 'task' and I'm going to say where the 'task.id', so if the 'task.id' that were in the current iteration is equal to the 'id' that's passed in, then we're going to have a specific 'object' else it's going to be the 'task', no change right, because we only want to change the one that we're dealing with, so for the one we're dealing with the object I want to copy, or let's say spread across, all of the task properties and values but I want to change to 'reminder', I'm going to set to the opposite of whatever that specific 'task' 'reminder' is. So I'm going to go ahead and save that, and I haven't used the 'React Dev Tools' yet, so if you go down to 'components' here, we can see our 'component' tree, we have each 'task' and if you hover on that you can see the different 'props' of that 'task' itself, 'onToggle', 'onDelete'. What I want to look at is, let's look at 'App' and you can see our 'state' right here, which is our three 'tasks' and if I look at the first one the reminder is set to 'true', now if I double click, now it's set to false Okay, because we double clicked it called this function and we set that particular task to change the 'reminder' to the opposite of what it was, if I click it againg, it goes to 'true'. So we know that's working but there's nothing in the UI that let's us know that. So, what we'll do is go back into 'taks.js', and remember we have that specific class of the reminder that will add a reminder to the edge. So, let's go, so we have 'className="task"' so what I'll do here is make this into an expression and some of the 'backticks' and I still want the 'task' 'class' that's going to be there no matter what, and then I want a condition here, so in the 'template literal' here we're going to say if the 'task.reminder' is 'true' then we're going to have the 'calss' of reminder, else, then it's going to be nothing. So if I save that, you can see the first tow have the green border because those are true, if I double click it goes away. Now it goes back to the default because we're just setting I mean this is just kind of like static data that we have as our default data, if you're using a back-end you'd be making fetch requests or HTTP requests to your server as well.

/***********************************************************************/

So now let's start to work on the 'add form' because we haven't even created that yet.
So in 'components', I'm going to create a new file, let's call this 'AddTask.js' and go ahead and create a 'component'. Now this is going to be a <form> so instead of a <div> it'll be a <form>, we'll give this a 'className' of 'add-form' and then each <input> is going to be wrapped in a 'class' of 'form-control', so let's say <div>, set the 'className' to 'form-control', we'll have a <label>, so this <label> we'll just say 'Task' for the <label> and then <input> will have a 'type' of 'text' and let's add 'placeholder' and set that to 'Add Task'. Okay there's other stuff we're going to add to this but I just want to get the <form> displayed for now, so I'm going to copy this <form> control down twice, and this next one is going to be the day, we'll say 'Day & Time', 'type' is 'text' and then for this we'll just say 'Add Day & Time'. Then this one is going to be let's say 'Reminder' or 'Set Reminder' and it's going to be a 'checkbox', so let's change the 'type' to 'checkbox' and get rid of the 'placeholder' we don't need that. And then I just want to have a 'submit' so we'll do an <input> with the 'type' of 'submit' and then let's have a 'value', the 'value' will be 'save', or 'Save Task'. Alright, so we'll save that and then let's just embed this into our 'App.js', so I'm going to copy this down and set that to 'AddTask', and then right below the <Header /> <AddTask />, now if I save that we should see our 'form'. Oh one thing I forgot some 'classes', just the styling, so the 'checkbox' 'form' control, I also have 'form-control-check' and then for the 'button' down here, the 'input' 'submit' let's say 'className' and that's going to be set to 'btn' and 'btn-block'. Ok let's make that look a little better and then let's open up our console make sure we have no errors.
Alright now each input is going to have it's own piece of 'state', 'component' level 'state', not App level 'state', so let's bring in 'import { useState } from 'react'' and then right above the 'return' we're going to have, the first one is 'text' and 'setText' is the method to update the state, the default is just and empty string and then we have 'setDay' for the 'day' input, and then we have 'reminder' 'setReminder' and the default for 'reminder' is going to be 'false'. Alright so we have that, now down in the 1:07:00
