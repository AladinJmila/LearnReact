Hey guys, welcome to my 2021 React Crash Course.

So, it's been two years or so since my one and I wanted to create an updated version, and this course is meant for beginners, I'll explaining some of the core concepts and fundamentals of React, we're gonna be building a task tracker application, looking at component, props, state, we're going to use React hooks, and we're also going to be dealing with something called JSON server, which is a mock rest API or kind of like a fake back end that we can use, so I can show you how we would use React in a full stack application where we're making 'requests' to an API. We're going to look at routing and a whole bunch of other stuff.

So the first thing I want to do is just go through slides and then we'll go ahead and jump into writing code.

So first off what is React? The standard definition is, it's a JavaScript Library for building user interfaces. And you may have heard of it referred to as a Framework, I refer to it as Framework, most people do and I will talk about why in a second.
Now, React is created and it's maintained by Facebook, it's strictly front-end meaning it runs in the Browser. When you have a web-app that's built with let's say PHP, you're running PHP on the server, you app is hosted on the server and then is serves HTML templates or HTML pages to the client. With React, you build what's called a 'Single Page Application' or a SPA, where you can have a single HTML page and then all or you 'routing' all that stuff is done through React which then compiles to a JavaScript bundle that's loaded by the Browser, so it makes it very fast and interactive interfaces.
Now even though React is a front-end Framework, so you cannot directly communicate with your database, it's often used in combination with other technologies to create a full-stack application. For instance the MERN stack which is really popular, it's MongoDB which is a type of database. Express which is a back-end Framework. Then Node.js which is a JavaScript runtime. You could also use React on the front-end and use PHP Laravel on the back-end, or Python Django. And what you do is you would serve JSON data from your server, and you would make requests from React to the server to get data, to add data, to update, delete and so on.
Now, as far as being a Library versus a Framework, most people call it a Framework and that's because it's directly comparable to something like Angular or View.js. Now it doesn't have as much included as much as Angular does, like Angular has a built-in routing system, React doesn't, you just have to install an extra package called React Router Dom. So it has an entire ecosystem of packages you can install to make it function as a full-fledged Framework.
Now, as far as a Library goes, when I think of a Library I think of like jQuery LowDash, something where you pull utilities in and use them in your application, React doesn't work like that, it's more like Angular or View, and those three are the top Frameworks in the industry right now, uh, I would go and say React is the most popular, but the other two are great as well.

/***********************************************************************/

All right, so we know that React is a front-end Library slash Framework. Now why would you wanna use it. There's actually a bunch of reasons but one of the biggest is it gives you a way to structure the view layer of you application. So MVC or Model View Controller is a popular design pattern for software, the Model deals with the data, the Controller deals with the requests and routing, and then the View is the UI the User Interface, the part of the app the user sees. React is basically the V in MVC.
Now if you've tried to build a large dynamic interface using JavaScript, vanilla JavaScript it can get really messy. You HTML you styling and your JavaScript logic are just all over the place and everyone writes Vanilla JavaScript differently. React allows you to build your UI using what are called 'reusable components', so every part of your user interface is looked at as a dynamic 'component' that can hold it's own 'state' and data.
We also don't have to separate our markup from our logic because React uses something called JSX, or 'JavaScript Syntax Extension' and this allows us to basically write dynamic HTML, but it's actually JavaScript formatted like HTML. We can even embed JavaScript expressions, variables, ect.
Now the apps that you build with React are very interactive because it uses something called the 'virtual-dom' which is the Document Object Model. What this does is it allows you to update parts of the page that need to be updated without reloading it. So if you have a list of users or in our case a list of tasks, and you want to delete one of them it doesn't have to reload the page, it does everything behind the scenes. If you to create a traditional PHP applications where you're just serving HTML templates, every delete you make is gonna have to refresh the page. So this makes things much faster, more dynamic and interactive.
React also has performance and testing benefits, another huge reason to learn React is it's very big in the industry right now, just by the way it structures everything it makes it much easier to work on projects with teams, rather than having a bunch of jumbled JavaScript. So managing data is also really easy with one-way data binding, all the data in your state is immutable meaning you can't mutate it directly and React provides ways to basically recreate your state every time that needs to be changed. So this helps with debugging and also offers better performance.

So what should you know before learning React? This can vary depending on person to person, but generally you want to have a good handle on JavaScript. You don't want to go from learning HTML and CSS and then jump right into React. You should know all the fundamentals of JavaScript including things like 'data types' and 'variables', 'functions', 'loops' ect. In React and JavaScript in general you work a lot with asynchronous code, so you should be familiar with 'promises', array methods such as foreach() and map(), filer(), reduce(), these are all commonly used in React applications, so get familiar with those. Doing algorithms is a really good way to practice these array methods.
And then the Fetch API is used to make HTTP requests to either your own back-end server or to a third-party API, for example the GitHub or YouTube API. So get familiar with Fetch.

/***********************************************************************/

So as I said, with React and pretty much any front-end Framework you're going to be looking at your User Interface as a bunch of components. So here's the app we're building, it's called Task Tracker, it's pretty simple you just add a task with a day and a time, you can set a reminder, and you'll be to double-click and set the reminder to either 'true' or 'false' which will show this border, we can delete and so on.
Now here, I just outlined each of the 'components', we have the green around the 'header' 'component' and inside the 'header' we have the 'button' 'component' we have the 'add task' 'component' which we could break down further and create 'input' 'components' as well if we wanted to. Down here we have the 'tasks' 'component' the purple, which wrap all of these and then each individual 'task' is also it's own 'component'. Then we have down here the 'footer' 'component'.
We're also going to look at routing a little bit, so we'll have this 'about' link and that's going to a separate 'rout' that will show the 'about' 'component'.
Alright, so you can go to any website or any UI, or go to Twitter and look at the different 'components', the list of Tweets, each Tweet itself, the box to post a Tweet, all your follower, everything can be looked at as a 'component'. So that's kind of the mind frame you want to be in when you're working with React or even Angular or View.
Now as far as creating 'components' in React, they can be created with both 'classes' and 'functions'. Now we'll be focusing mostly on 'function components' with 'hooks' which seems to be the more common way to do things these days, in my 2019 React course we focused on classes. So if you really dive into class-based 'components', you can check that course out.

So on the left we have a 'component' called 'header', this is formatted as an arrow function, of course it can be in traditional function as well. It simply returns a 'div' with an 'h1'. Now on the right it's the same 'component' as a class, and you can see it's defined as class the extends 'React.Component', which is going to give us everything that is in the root component class to work with, including with the render method which takes care of rendering
