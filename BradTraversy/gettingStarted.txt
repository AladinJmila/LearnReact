Hey guys, welcome to my 2021 React Crash Course.

So, it's been two years or so since my one and I wanted to create an updated version, and this course is meant for beginners, I'll explaining some of the core concepts and fundamentals of React, we're gonna be building a task tracker application, looking at component, props, state, we're going to use React hooks, and we're also going to be dealing with something called JSON server, which is a mock rest API or kind of like a fake back end that we can use, so I can show you how we would use React in a full stack application where we're making 'requests' to an API. We're going to look at routing and a whole bunch of other stuff.

So the first thing I want to do is just go through slides and then we'll go ahead and jump into writing code.

So first off what is React? The standard definition is, it's a JavaScript Library for building user interfaces. And you may have heard of it referred to as a Framework, I refer to it as Framework, most people do and I will talk about why in a second.
Now, React is created and it's maintained by Facebook, it's strictly front-end meaning it runs in the Browser. When you have a web-app that's built with let's say PHP, you're running PHP on the server, you app is hosted on the server and then is serves HTML templates or HTML pages to the client. With React, you build what's called a 'Single Page Application' or a SPA, where you can have a single HTML page and then all or you 'routing' all that stuff is done through React which then compiles to a JavaScript bundle that's loaded by the Browser, so it makes it very fast and interactive interfaces.
Now even though React is a front-end Framework, so you cannot directly communicate with your database, it's often used in combination with other technologies to create a full-stack application. For instance the MERN stack which is really popular, it's MongoDB which is a type of database. Express which is a back-end Framework. Then Node.js which is a JavaScript runtime. You could also use React on the front-end and use PHP Laravel on the back-end, or Python Django. And what you do is you would serve JSON data from your server, and you would make requests from React to the server to get data, to add data, to update, delete and so on.
Now, as far as being a Library versus a Framework, most people call it a Framework and that's because it's directly comparable to something like Angular or View.js. Now it doesn't have as much included as much as Angular does, like Angular has a built-in routing system, React doesn't, you just have to install an extra package called React Router Dom. So it has an entire ecosystem of packages you can install to make it function as a full-fledged Framework.
Now, as far as a Library goes, when I think of a Library I think of like jQuery LowDash, something where you pull utilities in and use them in your application, React doesn't work like that, it's more like Angular or View, and those three are the top Frameworks in the industry right now, uh, I would go and say React is the most popular, but the other two are great as well
