ECMA Script 6 introduced a new method in arrays called map(). This is a very useful method and in React we use it to render lists as you will see in the next section. So whenever you want to render a list of items, that's when you use the map method of arrays.

So let's say we have and array called colors with three items - red, green and blue. Let's imagine we want to render these using list items <li></li>, so for each color we want to have a list item.
So we call the map() method on this array, so this function is called by the map() method for each item in this array and takes one item at a time and returns a new item. So, a callback function, takes an item and returns a new item. Now in this case, I want to rename this item to 'color' because we are dealing with an array of colors, then we take a color which is a string and we simply return a new string like this: we have the opening 'li' tag plus color plus another string that includes the closing 'li' tag. Now this map method returns a new array so it does not modify the original array, let's call that 'items'.
Ok, now we can simplify this code, we can make it cleaner. So we have a callback function, it's a very simple function and a great candidate for converting to an arrow function. We get rid of the 'function' keyword, and put a fat arrow here. We have a single parameter so we can get rid of the parenthesis. We have a single line where we're returning a value, so we can get rid of the 'return' keyword as well as the curly braces. Put everything on one line and this is the end result.

So you're mapping or transforming the array of colors, for each call will return a string like this.

Now we can take things to the next level and make this code cleaner, these concatenations here are a little bit ugly, so instead we can use template literals in ES6. So instead of using single or double quotes we use the backtick character, that the character before number one on your keyboard. Here we can define a template for our string, so we want to have the opening and closing 'li' tags and in the middle we want to render the color dynamically, so we add a '$' dollar sign and '{}' curly braces. This is an argument placeholder, what we put in between the braces will be rendered dynamically at runtime, so here we want to render the 'color'.
